---
- name: Install and Configure Mailcow
  hosts: mailcow_servers
  become: yes
  gather_facts: yes
  vars:
    mailcow_hostname: "mail.cyberlab.live"
    mailcow_install_dir: "/opt/mailcow-dockerized"
    
  tasks:
    - name: Add hostname to /etc/hosts for local resolution
      lineinfile:
        path: /etc/hosts
        line: "127.0.0.1 {{ mailcow_hostname }}"
        state: present

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install required packages
      apt:
        name:
          - git
          - openssl
          - curl
          - gawk
          - coreutils
          - grep
          - jq
        state: present

    - name: Install Docker using get-docker.sh script
      shell: |
        curl -fsSL https://get.docker.com | CHANNEL=stable sh
      args:
        creates: /usr/bin/docker

    - name: Enable and start Docker service
      systemd:
        name: docker
        enabled: yes
        state: started

    - name: Update apt cache again
      apt:
        update_cache: yes

    - name: Install docker-compose-plugin
      apt:
        name: docker-compose-plugin
        state: present

    - name: Set umask
      shell: umask 0022
      changed_when: false

    - name: Clone Mailcow repository
      git:
        repo: https://github.com/mailcow/mailcow-dockerized
        dest: "{{ mailcow_install_dir }}"
        version: master
      become: yes

    - name: Add user to docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
      register: user_modified

    - name: Reset SSH connection to apply group changes
      meta: reset_connection
      when: user_modified is changed

    - name: Change ownership of mailcow directory
      file:
        path: "{{ mailcow_install_dir }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        recurse: yes

    - name: Add mailcow directory to git safe.directory
      command: git config --global --add safe.directory {{ mailcow_install_dir }}
      become: yes
      become_user: "{{ ansible_user }}"

    - name: Test Docker access
      command: docker ps
      become: yes
      become_user: "{{ ansible_user }}"
      register: docker_ps_output
      changed_when: false
      failed_when: false

    - name: Display Docker ps output
      debug:
        msg: 
          - "Docker ps command output:"
          - "{{ docker_ps_output.stdout_lines }}"
          - "Return code: {{ docker_ps_output.rc }}"

    - name: Display Docker status
      debug:
        msg: "âœ“ Docker is running successfully!"
      when: docker_ps_output.rc == 0

    - name: Pause if Docker failed
      pause:
        prompt: "Docker test FAILED! Error: {{ docker_ps_output.stderr }}. Press Enter to abort or Ctrl+C then 'C' to continue anyway..."
      when: docker_ps_output.rc != 0

    - name: Verify Docker is responding
      fail:
        msg: "Docker is not responding correctly. Please check Docker installation."
      when: docker_ps_output.rc != 0

    - name: Generate mailcow configuration
      shell: |
        printf '%s\n\n1\n' "{{ mailcow_hostname }}" | ./generate_config.sh
      args:
        chdir: "{{ mailcow_install_dir }}"
        creates: "{{ mailcow_install_dir }}/mailcow.conf"

    - name: Configure SKIP_LETS_ENCRYPT in mailcow.conf
      lineinfile:
        path: "{{ mailcow_install_dir }}/mailcow.conf"
        regexp: '^SKIP_LETS_ENCRYPT=.*'
        line: 'SKIP_LETS_ENCRYPT=y'
        state: present

    - name: Configure SKIP_HTTP_VERIFICATION in mailcow.conf
      lineinfile:
        path: "{{ mailcow_install_dir }}/mailcow.conf"
        regexp: '^SKIP_HTTP_VERIFICATION=.*'
        line: 'SKIP_HTTP_VERIFICATION=y'
        state: present

    - name: Configure SKIP_CLAMD in mailcow.conf
      lineinfile:
        path: "{{ mailcow_install_dir }}/mailcow.conf"
        regexp: '^SKIP_CLAMD=.*'
        line: 'SKIP_CLAMD=y'
        state: present

    - name: Configure SKIP_FTS in mailcow.conf
      lineinfile:
        path: "{{ mailcow_install_dir }}/mailcow.conf"
        regexp: '^SKIP_FTS=.*'
        line: 'SKIP_FTS=y'
        state: present

    - name: Pull Docker images for Mailcow
      command: docker compose pull
      args:
        chdir: "{{ mailcow_install_dir }}"
      become: yes

    - name: Start Mailcow with Docker Compose
      command: docker compose up -d
      args:
        chdir: "{{ mailcow_install_dir }}"
      become: yes

    - name: Display completion message
      debug:
        msg: "Mailcow installation completed! Access the web interface at https://{{ mailcow_hostname }}"
